0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Jan 04 05:35:14 2024
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _LCDprint
0000             29            public _LCD_4BIT
0000             30            public _WriteCommand
0000             31            public _WriteData
0000             32            public _LCD_byte
0000             33            public _LCD_pulse
0000             34            public _waitms
0000             35            public _Timer3us
0000             36            public _TIMER0_Init
0000             37            public __c51_external_startup
0000             38            public _LCDprint_PARM_3
0000             39            public _LCDprint_PARM_2
0000             40   ;--------------------------------------------------------
0000             41   ; Special Function Registers
0000             42   ;--------------------------------------------------------
0000             43   _ACC            DATA 0xe0
0000             44   _ADC0ASAH       DATA 0xb6
0000             45   _ADC0ASAL       DATA 0xb5
0000             46   _ADC0ASCF       DATA 0xa1
0000             47   _ADC0ASCT       DATA 0xc7
0000             48   _ADC0CF0        DATA 0xbc
0000             49   _ADC0CF1        DATA 0xb9
0000             50   _ADC0CF2        DATA 0xdf
0000             51   _ADC0CN0        DATA 0xe8
0000             52   _ADC0CN1        DATA 0xb2
0000             53   _ADC0CN2        DATA 0xb3
0000             54   _ADC0GTH        DATA 0xc4
0000             55   _ADC0GTL        DATA 0xc3
0000             56   _ADC0H          DATA 0xbe
0000             57   _ADC0L          DATA 0xbd
0000             58   _ADC0LTH        DATA 0xc6
0000             59   _ADC0LTL        DATA 0xc5
0000             60   _ADC0MX         DATA 0xbb
0000             61   _B              DATA 0xf0
0000             62   _CKCON0         DATA 0x8e
0000             63   _CKCON1         DATA 0xa6
0000             64   _CLEN0          DATA 0xc6
0000             65   _CLIE0          DATA 0xc7
0000             66   _CLIF0          DATA 0xe8
0000             67   _CLKSEL         DATA 0xa9
0000             68   _CLOUT0         DATA 0xd1
0000             69   _CLU0CF         DATA 0xb1
0000             70   _CLU0FN         DATA 0xaf
0000             71   _CLU0MX         DATA 0x84
0000             72   _CLU1CF         DATA 0xb3
0000             73   _CLU1FN         DATA 0xb2
0000             74   _CLU1MX         DATA 0x85
0000             75   _CLU2CF         DATA 0xb6
0000             76   _CLU2FN         DATA 0xb5
0000             77   _CLU2MX         DATA 0x91
0000             78   _CLU3CF         DATA 0xbf
0000             79   _CLU3FN         DATA 0xbe
0000             80   _CLU3MX         DATA 0xae
0000             81   _CMP0CN0        DATA 0x9b
0000             82   _CMP0CN1        DATA 0x99
0000             83   _CMP0MD         DATA 0x9d
0000             84   _CMP0MX         DATA 0x9f
0000             85   _CMP1CN0        DATA 0xbf
0000             86   _CMP1CN1        DATA 0xac
0000             87   _CMP1MD         DATA 0xab
0000             88   _CMP1MX         DATA 0xaa
0000             89   _CRC0CN0        DATA 0xce
0000             90   _CRC0CN1        DATA 0x86
0000             91   _CRC0CNT        DATA 0xd3
0000             92   _CRC0DAT        DATA 0xcb
0000             93   _CRC0FLIP       DATA 0xcf
0000             94   _CRC0IN         DATA 0xca
0000             95   _CRC0ST         DATA 0xd2
0000             96   _DAC0CF0        DATA 0x91
0000             97   _DAC0CF1        DATA 0x92
0000             98   _DAC0H          DATA 0x85
0000             99   _DAC0L          DATA 0x84
0000            100   _DAC1CF0        DATA 0x93
0000            101   _DAC1CF1        DATA 0x94
0000            102   _DAC1H          DATA 0x8a
0000            103   _DAC1L          DATA 0x89
0000            104   _DAC2CF0        DATA 0x95
0000            105   _DAC2CF1        DATA 0x96
0000            106   _DAC2H          DATA 0x8c
0000            107   _DAC2L          DATA 0x8b
0000            108   _DAC3CF0        DATA 0x9a
0000            109   _DAC3CF1        DATA 0x9c
0000            110   _DAC3H          DATA 0x8e
0000            111   _DAC3L          DATA 0x8d
0000            112   _DACGCF0        DATA 0x88
0000            113   _DACGCF1        DATA 0x98
0000            114   _DACGCF2        DATA 0xa2
0000            115   _DERIVID        DATA 0xad
0000            116   _DEVICEID       DATA 0xb5
0000            117   _DPH            DATA 0x83
0000            118   _DPL            DATA 0x82
0000            119   _EIE1           DATA 0xe6
0000            120   _EIE2           DATA 0xf3
0000            121   _EIP1           DATA 0xbb
0000            122   _EIP1H          DATA 0xee
0000            123   _EIP2           DATA 0xed
0000            124   _EIP2H          DATA 0xf6
0000            125   _EMI0CN         DATA 0xe7
0000            126   _FLKEY          DATA 0xb7
0000            127   _HFO0CAL        DATA 0xc7
0000            128   _HFO1CAL        DATA 0xd6
0000            129   _HFOCN          DATA 0xef
0000            130   _I2C0ADM        DATA 0xff
0000            131   _I2C0CN0        DATA 0xba
0000            132   _I2C0DIN        DATA 0xbc
0000            133   _I2C0DOUT       DATA 0xbb
0000            134   _I2C0FCN0       DATA 0xad
0000            135   _I2C0FCN1       DATA 0xab
0000            136   _I2C0FCT        DATA 0xf5
0000            137   _I2C0SLAD       DATA 0xbd
0000            138   _I2C0STAT       DATA 0xb9
0000            139   _IE             DATA 0xa8
0000            140   _IP             DATA 0xb8
0000            141   _IPH            DATA 0xf2
0000            142   _IT01CF         DATA 0xe4
0000            143   _LFO0CN         DATA 0xb1
0000            144   _P0             DATA 0x80
0000            145   _P0MASK         DATA 0xfe
0000            146   _P0MAT          DATA 0xfd
0000            147   _P0MDIN         DATA 0xf1
0000            148   _P0MDOUT        DATA 0xa4
0000            149   _P0SKIP         DATA 0xd4
0000            150   _P1             DATA 0x90
0000            151   _P1MASK         DATA 0xee
0000            152   _P1MAT          DATA 0xed
0000            153   _P1MDIN         DATA 0xf2
0000            154   _P1MDOUT        DATA 0xa5
0000            155   _P1SKIP         DATA 0xd5
0000            156   _P2             DATA 0xa0
0000            157   _P2MASK         DATA 0xfc
0000            158   _P2MAT          DATA 0xfb
0000            159   _P2MDIN         DATA 0xf3
0000            160   _P2MDOUT        DATA 0xa6
0000            161   _P2SKIP         DATA 0xcc
0000            162   _P3             DATA 0xb0
0000            163   _P3MDIN         DATA 0xf4
0000            164   _P3MDOUT        DATA 0x9c
0000            165   _PCA0CENT       DATA 0x9e
0000            166   _PCA0CLR        DATA 0x9c
0000            167   _PCA0CN0        DATA 0xd8
0000            168   _PCA0CPH0       DATA 0xfc
0000            169   _PCA0CPH1       DATA 0xea
0000            170   _PCA0CPH2       DATA 0xec
0000            171   _PCA0CPH3       DATA 0xf5
0000            172   _PCA0CPH4       DATA 0x85
0000            173   _PCA0CPH5       DATA 0xde
0000            174   _PCA0CPL0       DATA 0xfb
0000            175   _PCA0CPL1       DATA 0xe9
0000            176   _PCA0CPL2       DATA 0xeb
0000            177   _PCA0CPL3       DATA 0xf4
0000            178   _PCA0CPL4       DATA 0x84
0000            179   _PCA0CPL5       DATA 0xdd
0000            180   _PCA0CPM0       DATA 0xda
0000            181   _PCA0CPM1       DATA 0xdb
0000            182   _PCA0CPM2       DATA 0xdc
0000            183   _PCA0CPM3       DATA 0xae
0000            184   _PCA0CPM4       DATA 0xaf
0000            185   _PCA0CPM5       DATA 0xcc
0000            186   _PCA0H          DATA 0xfa
0000            187   _PCA0L          DATA 0xf9
0000            188   _PCA0MD         DATA 0xd9
0000            189   _PCA0POL        DATA 0x96
0000            190   _PCA0PWM        DATA 0xf7
0000            191   _PCON0          DATA 0x87
0000            192   _PCON1          DATA 0xcd
0000            193   _PFE0CN         DATA 0xc1
0000            194   _PRTDRV         DATA 0xf6
0000            195   _PSCTL          DATA 0x8f
0000            196   _PSTAT0         DATA 0xaa
0000            197   _PSW            DATA 0xd0
0000            198   _REF0CN         DATA 0xd1
0000            199   _REG0CN         DATA 0xc9
0000            200   _REVID          DATA 0xb6
0000            201   _RSTSRC         DATA 0xef
0000            202   _SBCON1         DATA 0x94
0000            203   _SBRLH1         DATA 0x96
0000            204   _SBRLL1         DATA 0x95
0000            205   _SBUF           DATA 0x99
0000            206   _SBUF0          DATA 0x99
0000            207   _SBUF1          DATA 0x92
0000            208   _SCON           DATA 0x98
0000            209   _SCON0          DATA 0x98
0000            210   _SCON1          DATA 0xc8
0000            211   _SFRPAGE        DATA 0xa7
0000            212   _SFRPGCN        DATA 0xbc
0000            213   _SFRSTACK       DATA 0xd7
0000            214   _SMB0ADM        DATA 0xd6
0000            215   _SMB0ADR        DATA 0xd7
0000            216   _SMB0CF         DATA 0xc1
0000            217   _SMB0CN0        DATA 0xc0
0000            218   _SMB0DAT        DATA 0xc2
0000            219   _SMB0FCN0       DATA 0xc3
0000            220   _SMB0FCN1       DATA 0xc4
0000            221   _SMB0FCT        DATA 0xef
0000            222   _SMB0RXLN       DATA 0xc5
0000            223   _SMB0TC         DATA 0xac
0000            224   _SMOD1          DATA 0x93
0000            225   _SP             DATA 0x81
0000            226   _SPI0CFG        DATA 0xa1
0000            227   _SPI0CKR        DATA 0xa2
0000            228   _SPI0CN0        DATA 0xf8
0000            229   _SPI0DAT        DATA 0xa3
0000            230   _SPI0FCN0       DATA 0x9a
0000            231   _SPI0FCN1       DATA 0x9b
0000            232   _SPI0FCT        DATA 0xf7
0000            233   _SPI0PCF        DATA 0xdf
0000            234   _TCON           DATA 0x88
0000            235   _TH0            DATA 0x8c
0000            236   _TH1            DATA 0x8d
0000            237   _TL0            DATA 0x8a
0000            238   _TL1            DATA 0x8b
0000            239   _TMOD           DATA 0x89
0000            240   _TMR2CN0        DATA 0xc8
0000            241   _TMR2CN1        DATA 0xfd
0000            242   _TMR2H          DATA 0xcf
0000            243   _TMR2L          DATA 0xce
0000            244   _TMR2RLH        DATA 0xcb
0000            245   _TMR2RLL        DATA 0xca
0000            246   _TMR3CN0        DATA 0x91
0000            247   _TMR3CN1        DATA 0xfe
0000            248   _TMR3H          DATA 0x95
0000            249   _TMR3L          DATA 0x94
0000            250   _TMR3RLH        DATA 0x93
0000            251   _TMR3RLL        DATA 0x92
0000            252   _TMR4CN0        DATA 0x98
0000            253   _TMR4CN1        DATA 0xff
0000            254   _TMR4H          DATA 0xa5
0000            255   _TMR4L          DATA 0xa4
0000            256   _TMR4RLH        DATA 0xa3
0000            257   _TMR4RLL        DATA 0xa2
0000            258   _TMR5CN0        DATA 0xc0
0000            259   _TMR5CN1        DATA 0xf1
0000            260   _TMR5H          DATA 0xd5
0000            261   _TMR5L          DATA 0xd4
0000            262   _TMR5RLH        DATA 0xd3
0000            263   _TMR5RLL        DATA 0xd2
0000            264   _UART0PCF       DATA 0xd9
0000            265   _UART1FCN0      DATA 0x9d
0000            266   _UART1FCN1      DATA 0xd8
0000            267   _UART1FCT       DATA 0xfa
0000            268   _UART1LIN       DATA 0x9e
0000            269   _UART1PCF       DATA 0xda
0000            270   _VDM0CN         DATA 0xff
0000            271   _WDTCN          DATA 0x97
0000            272   _XBR0           DATA 0xe1
0000            273   _XBR1           DATA 0xe2
0000            274   _XBR2           DATA 0xe3
0000            275   _XOSC0CN        DATA 0x86
0000            276   _DPTR           DATA 0x8382
0000            277   _TMR2RL         DATA 0xcbca
0000            278   _TMR3RL         DATA 0x9392
0000            279   _TMR4RL         DATA 0xa3a2
0000            280   _TMR5RL         DATA 0xd3d2
0000            281   _TMR0           DATA 0x8c8a
0000            282   _TMR1           DATA 0x8d8b
0000            283   _TMR2           DATA 0xcfce
0000            284   _TMR3           DATA 0x9594
0000            285   _TMR4           DATA 0xa5a4
0000            286   _TMR5           DATA 0xd5d4
0000            287   _SBRL1          DATA 0x9695
0000            288   _PCA0           DATA 0xfaf9
0000            289   _PCA0CP0        DATA 0xfcfb
0000            290   _PCA0CP1        DATA 0xeae9
0000            291   _PCA0CP2        DATA 0xeceb
0000            292   _PCA0CP3        DATA 0xf5f4
0000            293   _PCA0CP4        DATA 0x8584
0000            294   _PCA0CP5        DATA 0xdedd
0000            295   _ADC0ASA        DATA 0xb6b5
0000            296   _ADC0GT         DATA 0xc4c3
0000            297   _ADC0           DATA 0xbebd
0000            298   _ADC0LT         DATA 0xc6c5
0000            299   _DAC0           DATA 0x8584
0000            300   _DAC1           DATA 0x8a89
0000            301   _DAC2           DATA 0x8c8b
0000            302   _DAC3           DATA 0x8e8d
0000            303   ;--------------------------------------------------------
0000            304   ; special function bits
0000            305   ;--------------------------------------------------------
0000            306   _ACC_0          BIT 0xe0
0000            307   _ACC_1          BIT 0xe1
0000            308   _ACC_2          BIT 0xe2
0000            309   _ACC_3          BIT 0xe3
0000            310   _ACC_4          BIT 0xe4
0000            311   _ACC_5          BIT 0xe5
0000            312   _ACC_6          BIT 0xe6
0000            313   _ACC_7          BIT 0xe7
0000            314   _TEMPE          BIT 0xe8
0000            315   _ADGN0          BIT 0xe9
0000            316   _ADGN1          BIT 0xea
0000            317   _ADWINT         BIT 0xeb
0000            318   _ADBUSY         BIT 0xec
0000            319   _ADINT          BIT 0xed
0000            320   _IPOEN          BIT 0xee
0000            321   _ADEN           BIT 0xef
0000            322   _B_0            BIT 0xf0
0000            323   _B_1            BIT 0xf1
0000            324   _B_2            BIT 0xf2
0000            325   _B_3            BIT 0xf3
0000            326   _B_4            BIT 0xf4
0000            327   _B_5            BIT 0xf5
0000            328   _B_6            BIT 0xf6
0000            329   _B_7            BIT 0xf7
0000            330   _C0FIF          BIT 0xe8
0000            331   _C0RIF          BIT 0xe9
0000            332   _C1FIF          BIT 0xea
0000            333   _C1RIF          BIT 0xeb
0000            334   _C2FIF          BIT 0xec
0000            335   _C2RIF          BIT 0xed
0000            336   _C3FIF          BIT 0xee
0000            337   _C3RIF          BIT 0xef
0000            338   _D1SRC0         BIT 0x88
0000            339   _D1SRC1         BIT 0x89
0000            340   _D1AMEN         BIT 0x8a
0000            341   _D01REFSL       BIT 0x8b
0000            342   _D3SRC0         BIT 0x8c
0000            343   _D3SRC1         BIT 0x8d
0000            344   _D3AMEN         BIT 0x8e
0000            345   _D23REFSL       BIT 0x8f
0000            346   _D0UDIS         BIT 0x98
0000            347   _D1UDIS         BIT 0x99
0000            348   _D2UDIS         BIT 0x9a
0000            349   _D3UDIS         BIT 0x9b
0000            350   _EX0            BIT 0xa8
0000            351   _ET0            BIT 0xa9
0000            352   _EX1            BIT 0xaa
0000            353   _ET1            BIT 0xab
0000            354   _ES0            BIT 0xac
0000            355   _ET2            BIT 0xad
0000            356   _ESPI0          BIT 0xae
0000            357   _EA             BIT 0xaf
0000            358   _PX0            BIT 0xb8
0000            359   _PT0            BIT 0xb9
0000            360   _PX1            BIT 0xba
0000            361   _PT1            BIT 0xbb
0000            362   _PS0            BIT 0xbc
0000            363   _PT2            BIT 0xbd
0000            364   _PSPI0          BIT 0xbe
0000            365   _P0_0           BIT 0x80
0000            366   _P0_1           BIT 0x81
0000            367   _P0_2           BIT 0x82
0000            368   _P0_3           BIT 0x83
0000            369   _P0_4           BIT 0x84
0000            370   _P0_5           BIT 0x85
0000            371   _P0_6           BIT 0x86
0000            372   _P0_7           BIT 0x87
0000            373   _P1_0           BIT 0x90
0000            374   _P1_1           BIT 0x91
0000            375   _P1_2           BIT 0x92
0000            376   _P1_3           BIT 0x93
0000            377   _P1_4           BIT 0x94
0000            378   _P1_5           BIT 0x95
0000            379   _P1_6           BIT 0x96
0000            380   _P1_7           BIT 0x97
0000            381   _P2_0           BIT 0xa0
0000            382   _P2_1           BIT 0xa1
0000            383   _P2_2           BIT 0xa2
0000            384   _P2_3           BIT 0xa3
0000            385   _P2_4           BIT 0xa4
0000            386   _P2_5           BIT 0xa5
0000            387   _P2_6           BIT 0xa6
0000            388   _P3_0           BIT 0xb0
0000            389   _P3_1           BIT 0xb1
0000            390   _P3_2           BIT 0xb2
0000            391   _P3_3           BIT 0xb3
0000            392   _P3_4           BIT 0xb4
0000            393   _P3_7           BIT 0xb7
0000            394   _CCF0           BIT 0xd8
0000            395   _CCF1           BIT 0xd9
0000            396   _CCF2           BIT 0xda
0000            397   _CCF3           BIT 0xdb
0000            398   _CCF4           BIT 0xdc
0000            399   _CCF5           BIT 0xdd
0000            400   _CR             BIT 0xde
0000            401   _CF             BIT 0xdf
0000            402   _PARITY         BIT 0xd0
0000            403   _F1             BIT 0xd1
0000            404   _OV             BIT 0xd2
0000            405   _RS0            BIT 0xd3
0000            406   _RS1            BIT 0xd4
0000            407   _F0             BIT 0xd5
0000            408   _AC             BIT 0xd6
0000            409   _CY             BIT 0xd7
0000            410   _RI             BIT 0x98
0000            411   _TI             BIT 0x99
0000            412   _RB8            BIT 0x9a
0000            413   _TB8            BIT 0x9b
0000            414   _REN            BIT 0x9c
0000            415   _CE             BIT 0x9d
0000            416   _SMODE          BIT 0x9e
0000            417   _RI1            BIT 0xc8
0000            418   _TI1            BIT 0xc9
0000            419   _RBX1           BIT 0xca
0000            420   _TBX1           BIT 0xcb
0000            421   _REN1           BIT 0xcc
0000            422   _PERR1          BIT 0xcd
0000            423   _OVR1           BIT 0xce
0000            424   _SI             BIT 0xc0
0000            425   _ACK            BIT 0xc1
0000            426   _ARBLOST        BIT 0xc2
0000            427   _ACKRQ          BIT 0xc3
0000            428   _STO            BIT 0xc4
0000            429   _STA            BIT 0xc5
0000            430   _TXMODE         BIT 0xc6
0000            431   _MASTER         BIT 0xc7
0000            432   _SPIEN          BIT 0xf8
0000            433   _TXNF           BIT 0xf9
0000            434   _NSSMD0         BIT 0xfa
0000            435   _NSSMD1         BIT 0xfb
0000            436   _RXOVRN         BIT 0xfc
0000            437   _MODF           BIT 0xfd
0000            438   _WCOL           BIT 0xfe
0000            439   _SPIF           BIT 0xff
0000            440   _IT0            BIT 0x88
0000            441   _IE0            BIT 0x89
0000            442   _IT1            BIT 0x8a
0000            443   _IE1            BIT 0x8b
0000            444   _TR0            BIT 0x8c
0000            445   _TF0            BIT 0x8d
0000            446   _TR1            BIT 0x8e
0000            447   _TF1            BIT 0x8f
0000            448   _T2XCLK0        BIT 0xc8
0000            449   _T2XCLK1        BIT 0xc9
0000            450   _TR2            BIT 0xca
0000            451   _T2SPLIT        BIT 0xcb
0000            452   _TF2CEN         BIT 0xcc
0000            453   _TF2LEN         BIT 0xcd
0000            454   _TF2L           BIT 0xce
0000            455   _TF2H           BIT 0xcf
0000            456   _T4XCLK0        BIT 0x98
0000            457   _T4XCLK1        BIT 0x99
0000            458   _TR4            BIT 0x9a
0000            459   _T4SPLIT        BIT 0x9b
0000            460   _TF4CEN         BIT 0x9c
0000            461   _TF4LEN         BIT 0x9d
0000            462   _TF4L           BIT 0x9e
0000            463   _TF4H           BIT 0x9f
0000            464   _T5XCLK0        BIT 0xc0
0000            465   _T5XCLK1        BIT 0xc1
0000            466   _TR5            BIT 0xc2
0000            467   _T5SPLIT        BIT 0xc3
0000            468   _TF5CEN         BIT 0xc4
0000            469   _TF5LEN         BIT 0xc5
0000            470   _TF5L           BIT 0xc6
0000            471   _TF5H           BIT 0xc7
0000            472   _RIE            BIT 0xd8
0000            473   _RXTO0          BIT 0xd9
0000            474   _RXTO1          BIT 0xda
0000            475   _RFRQ           BIT 0xdb
0000            476   _TIE            BIT 0xdc
0000            477   _TXHOLD         BIT 0xdd
0000            478   _TXNF1          BIT 0xde
0000            479   _TFRQ           BIT 0xdf
0000            480   ;--------------------------------------------------------
0000            481   ; overlayable register banks
0000            482   ;--------------------------------------------------------
0000            483            rbank0 segment data overlay
0000            484   ;--------------------------------------------------------
0000            485   ; internal ram data
0000            486   ;--------------------------------------------------------
0000            487            rseg R_DSEG
0000            488   _LCDprint_PARM_2:
0000            489            ds 1
0001            490   _main_buff_1_65:
0001            491            ds 17
0012            492   ;--------------------------------------------------------
0012            493   ; overlayable items in internal ram 
0012            494   ;--------------------------------------------------------
0000            495            rseg    R_OSEG
0000            496   ;--------------------------------------------------------
0000            497   ; indirectly addressable internal ram data
0000            498   ;--------------------------------------------------------
0000            499            rseg R_ISEG
0000            500   ;--------------------------------------------------------
0000            501   ; absolute internal ram data
0000            502   ;--------------------------------------------------------
0000            503            DSEG
0000            504   ;--------------------------------------------------------
0000            505   ; bit data
0000            506   ;--------------------------------------------------------
0000            507            rseg R_BSEG
0000            508   _LCDprint_PARM_3:
0000            509            DBIT    1
0001            510   ;--------------------------------------------------------
0001            511   ; paged external ram data
0001            512   ;--------------------------------------------------------
0000            513            rseg R_PSEG
0000            514   ;--------------------------------------------------------
0000            515   ; external ram data
0000            516   ;--------------------------------------------------------
0000            517            rseg R_XSEG
0000            518   ;--------------------------------------------------------
0000            519   ; absolute external ram data
0000            520   ;--------------------------------------------------------
0000            521            XSEG
0000            522   ;--------------------------------------------------------
0000            523   ; external initialized ram data
0000            524   ;--------------------------------------------------------
0000            525            rseg R_IXSEG
0000            526            rseg R_HOME
0000            527            rseg R_GSINIT
0000            528            rseg R_CSEG
0000            529   ;--------------------------------------------------------
0000            530   ; Reset entry point and interrupt vectors
0000            531   ;--------------------------------------------------------
0000            532            CSEG at 0x0000
0000 020000     533            ljmp    _crt0
0003            534   ;--------------------------------------------------------
0003            535   ; global & static initialisations
0003            536   ;--------------------------------------------------------
0000            537            rseg R_HOME
0000            538            rseg R_GSINIT
0000            539            rseg R_GSINIT
0000            540   ;--------------------------------------------------------
0000            541   ; data variables initialization
0000            542   ;--------------------------------------------------------
0000            543            rseg R_DINIT
0000            544            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            545   ;--------------------------------------------------------
0000            546   ; code
0000            547   ;--------------------------------------------------------
0000            548            rseg R_CSEG
0000            549   ;------------------------------------------------------------
0000            550   ;Allocation info for local variables in function '_c51_external_startup'
0000            551   ;------------------------------------------------------------
0000            552   ;------------------------------------------------------------
0000            553   ;        ../setup.c:3: char _c51_external_startup (void)
0000            554   ;        -----------------------------------------
0000            555   ;         function _c51_external_startup
0000            556   ;        -----------------------------------------
0000            557   __c51_external_startup:
0000            558            using   0
0000            559   ;        ../setup.c:8: SFRPAGE = 0x00; // Disable all interrupts
0000 75A700     560            mov     _SFRPAGE,#0x00
0003            561   ;        ../setup.c:10: WDTCN = 0xDE; //First key
0003 7597DE     562            mov     _WDTCN,#0xDE
0006            563   ;        ../setup.c:11: WDTCN = 0xAD; //Second key
0006 7597AD     564            mov     _WDTCN,#0xAD
0009            565   ;        ../setup.c:18: VDM0CN |= 0x80; // Supply Monitor Enabled
0009 43FF80     566            orl     _VDM0CN,#0x80
000C            567   ;        ../setup.c:19: RSTSRC = 0x02;
000C 75EF02     568            mov     _RSTSRC,#0x02
000F            569   ;        ../setup.c:33: SFRPAGE = 0x10; // Re-enable interrupts
000F 75A710     570            mov     _SFRPAGE,#0x10
0012            571   ;        ../setup.c:34: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     572            mov     _PFE0CN,#0x20
0015            573   ;        ../setup.c:35: SFRPAGE = 0x00; // Disable all interrupts
0015 75A700     574            mov     _SFRPAGE,#0x00
0018            575   ;        ../setup.c:61: CLKSEL = 0x00;
0018 75A900     576            mov     _CLKSEL,#0x00
001B            577   ;        ../setup.c:62: CLKSEL = 0x00;
001B 75A900     578            mov     _CLKSEL,#0x00
001E            579   ;        ../setup.c:63: while ((CLKSEL & 0x80) == 0); // While clock has not propagated through divider yet.
001E            580   L002001?:
001E E5A9       581            mov     a,_CLKSEL
0020 30E700     582            jnb     acc.7,L002001?
0023            583   ;        ../setup.c:64: CLKSEL = 0x03;
0023 75A903     584            mov     _CLKSEL,#0x03
0026            585   ;        ../setup.c:65: CLKSEL = 0x03;
0026 75A903     586            mov     _CLKSEL,#0x03
0029            587   ;        ../setup.c:66: while ((CLKSEL & 0x80) == 0); // While clock has not propagated through divider yet.
0029            588   L002004?:
0029 E5A9       589            mov     a,_CLKSEL
002B 30E780     590            jnb     acc.7,L002004?
002E            591   ;        ../setup.c:72: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     592            orl     _P0MDOUT,#0x10
0031            593   ;        ../setup.c:73: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     594            mov     _XBR0,#0x01
0034            595   ;        ../setup.c:74: XBR1     = 0X00;
0034 75E200     596            mov     _XBR1,#0x00
0037            597   ;        ../setup.c:75: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     598            mov     _XBR2,#0x40
003A            599   ;        ../setup.c:81: SCON0 = 0x10;
003A 759810     600            mov     _SCON0,#0x10
003D            601   ;        ../setup.c:82: CKCON0 |= 0b_0000_0000; // Timer 1 uses the system clock divided by 12.
003D 858E8E     602            mov     _CKCON0,_CKCON0
0040            603   ;        ../setup.c:83: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     604            mov     _TH1,#0xE6
0043            605   ;        ../setup.c:84: TL1 = TH1;      // Init Timer1
0043 858D8B     606            mov     _TL1,_TH1
0046            607   ;        ../setup.c:85: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     608            anl     _TMOD,#0x0F
0049            609   ;        ../setup.c:86: TMOD |=  0x20;                       
0049 438920     610            orl     _TMOD,#0x20
004C            611   ;        ../setup.c:87: TR1 = 1; // START Timer1
004C D28E       612            setb    _TR1
004E            613   ;        ../setup.c:88: TI = 1;  // Indicate TX0 ready
004E D299       614            setb    _TI
0050            615   ;        ../setup.c:90: return 0;
0050 758200     616            mov     dpl,#0x00
0053 22         617            ret
0054            618   ;------------------------------------------------------------
0054            619   ;Allocation info for local variables in function 'TIMER0_Init'
0054            620   ;------------------------------------------------------------
0054            621   ;------------------------------------------------------------
0054            622   ;        ../TimerCounter.c:10: void TIMER0_Init(void)
0054            623   ;        -----------------------------------------
0054            624   ;         function TIMER0_Init
0054            625   ;        -----------------------------------------
0054            626   _TIMER0_Init:
0054            627   ;        ../TimerCounter.c:12: TMOD&=0b_1111_0000; // Set the bits of TMOD to zero: Timer/Counter 0: DISABLED gate control, TIMER mode, Mode 0 -- 13-bit Counter/Timer
0054 5389F0     628            anl     _TMOD,#0xF0
0057            629   ;        ../TimerCounter.c:13: TMOD|=0b_0000_0001; // Set last bit of TMOD to one: Timer/Counter 0: Mode 1 -- 16-bit Counter/Timer
0057 438901     630            orl     _TMOD,#0x01
005A            631   ;        ../TimerCounter.c:14: TR0=0; // Stop Timer/Counter 0
005A C28C       632            clr     _TR0
005C 22         633            ret
005D            634   ;------------------------------------------------------------
005D            635   ;Allocation info for local variables in function 'Timer3us'
005D            636   ;------------------------------------------------------------
005D            637   ;us                        Allocated to registers r2 
005D            638   ;i                         Allocated to registers r3 
005D            639   ;------------------------------------------------------------
005D            640   ;        ../TimerCounter.c:20: void Timer3us(unsigned char us)
005D            641   ;        -----------------------------------------
005D            642   ;         function Timer3us
005D            643   ;        -----------------------------------------
005D            644   _Timer3us:
005D AA82       645            mov     r2,dpl
005F            646   ;        ../TimerCounter.c:24: CKCON0|=0b_0100_0000; // Set bit 6 (T3ML) of CKCON0 (page 327) to one: Timer3 low byte uses SYSCLK
005F 438E40     647            orl     _CKCON0,#0x40
0062            648   ;        ../TimerCounter.c:25: TMR3RL = (-(SYSCLK)/1000000L); // Reload value: Set Timer3 to overflow in 1us.
0062 7592B8     649            mov     _TMR3RL,#0xB8
0065 7593FF     650            mov     (_TMR3RL >> 8),#0xFF
0068            651   ;        ../TimerCounter.c:27: TMR3L = TMR3RL;                 // Initialize Timer3 for first overflow
0068 859294     652            mov     _TMR3L,_TMR3RL
006B            653   ;        ../TimerCounter.c:28: TMR3CN0 = 0x04;                 // Reset everything, clear overflow flag and enable Timer3
006B 759104     654            mov     _TMR3CN0,#0x04
006E            655   ;        ../TimerCounter.c:30: for (i = 0; i < us; i++)
006E 7B00       656            mov     r3,#0x00
0070            657   L004004?:
0070 C3         658            clr     c
0071 EB         659            mov     a,r3
0072 9A         660            subb    a,r2
0073 5000       661            jnc     L004007?
0075            662   ;        ../TimerCounter.c:32: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0075            663   L004001?:
0075 E591       664            mov     a,_TMR3CN0
0077 30E780     665            jnb     acc.7,L004001?
007A            666   ;        ../TimerCounter.c:33: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
007A 53917F     667            anl     _TMR3CN0,#0x7F
007D            668   ;        ../TimerCounter.c:30: for (i = 0; i < us; i++)
007D 0B         669            inc     r3
007E 8000       670            sjmp    L004004?
0080            671   L004007?:
0080            672   ;        ../TimerCounter.c:35: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0080 759100     673            mov     _TMR3CN0,#0x00
0083 22         674            ret
0084            675   ;------------------------------------------------------------
0084            676   ;Allocation info for local variables in function 'waitms'
0084            677   ;------------------------------------------------------------
0084            678   ;ms                        Allocated to registers r2 r3 
0084            679   ;j                         Allocated to registers r2 r3 
0084            680   ;------------------------------------------------------------
0084            681   ;        ../TimerCounter.c:37: void waitms (unsigned int ms)
0084            682   ;        -----------------------------------------
0084            683   ;         function waitms
0084            684   ;        -----------------------------------------
0084            685   _waitms:
0084 AA82       686            mov     r2,dpl
0086 AB83       687            mov     r3,dph
0088            688   ;        ../TimerCounter.c:40: for(j=ms; j!=0; j--)
0088            689   L005001?:
0088 BA0040     690            cjne    r2,#0x00,L005010?
008B BB0040     691            cjne    r3,#0x00,L005010?
008E 22         692            ret
008F            693   L005010?:
008F            694   ;        ../TimerCounter.c:42: Timer3us(250);
008F 7582FA     695            mov     dpl,#0xFA
0092 C002       696            push    ar2
0094 C003       697            push    ar3
0096 120000     698            lcall   _Timer3us
0099            699   ;        ../TimerCounter.c:43: Timer3us(250);
0099 7582FA     700            mov     dpl,#0xFA
009C 120000     701            lcall   _Timer3us
009F            702   ;        ../TimerCounter.c:44: Timer3us(250);
009F 7582FA     703            mov     dpl,#0xFA
00A2 120000     704            lcall   _Timer3us
00A5            705   ;        ../TimerCounter.c:45: Timer3us(250);
00A5 7582FA     706            mov     dpl,#0xFA
00A8 120000     707            lcall   _Timer3us
00AB D003       708            pop     ar3
00AD D002       709            pop     ar2
00AF            710   ;        ../TimerCounter.c:40: for(j=ms; j!=0; j--)
00AF 1A         711            dec     r2
00B0 BAFF80     712            cjne    r2,#0xff,L005011?
00B3 1B         713            dec     r3
00B4            714   L005011?:
00B4 8000       715            sjmp    L005001?
00B6            716   ;------------------------------------------------------------
00B6            717   ;Allocation info for local variables in function 'LCD_pulse'
00B6            718   ;------------------------------------------------------------
00B6            719   ;------------------------------------------------------------
00B6            720   ;        ../LCD.c:5: void LCD_pulse (void)
00B6            721   ;        -----------------------------------------
00B6            722   ;         function LCD_pulse
00B6            723   ;        -----------------------------------------
00B6            724   _LCD_pulse:
00B6            725   ;        ../LCD.c:7: LCD_E=1;
00B6 D2A5       726            setb    _P2_5
00B8            727   ;        ../LCD.c:8: Timer3us(40);
00B8 758228     728            mov     dpl,#0x28
00BB 120000     729            lcall   _Timer3us
00BE            730   ;        ../LCD.c:9: LCD_E=0;
00BE C2A5       731            clr     _P2_5
00C0 22         732            ret
00C1            733   ;------------------------------------------------------------
00C1            734   ;Allocation info for local variables in function 'LCD_byte'
00C1            735   ;------------------------------------------------------------
00C1            736   ;x                         Allocated to registers r2 
00C1            737   ;------------------------------------------------------------
00C1            738   ;        ../LCD.c:12: void LCD_byte (unsigned char x)
00C1            739   ;        -----------------------------------------
00C1            740   ;         function LCD_byte
00C1            741   ;        -----------------------------------------
00C1            742   _LCD_byte:
00C1 AA82       743            mov     r2,dpl
00C3            744   ;        ../LCD.c:15: ACC=x; //Send high nible
00C3 8AE0       745            mov     _ACC,r2
00C5            746   ;        ../LCD.c:16: LCD_D7=ACC_7;
00C5 A2E7       747            mov     c,_ACC_7
00C7 92A1       748            mov     _P2_1,c
00C9            749   ;        ../LCD.c:17: LCD_D6=ACC_6;
00C9 A2E6       750            mov     c,_ACC_6
00CB 92A2       751            mov     _P2_2,c
00CD            752   ;        ../LCD.c:18: LCD_D5=ACC_5;
00CD A2E5       753            mov     c,_ACC_5
00CF 92A3       754            mov     _P2_3,c
00D1            755   ;        ../LCD.c:19: LCD_D4=ACC_4;
00D1 A2E4       756            mov     c,_ACC_4
00D3 92A4       757            mov     _P2_4,c
00D5            758   ;        ../LCD.c:20: LCD_pulse();
00D5 C002       759            push    ar2
00D7 120000     760            lcall   _LCD_pulse
00DA            761   ;        ../LCD.c:21: Timer3us(40);
00DA 758228     762            mov     dpl,#0x28
00DD 120000     763            lcall   _Timer3us
00E0 D002       764            pop     ar2
00E2            765   ;        ../LCD.c:22: ACC=x; //Send low nible
00E2 8AE0       766            mov     _ACC,r2
00E4            767   ;        ../LCD.c:23: LCD_D7=ACC_3;
00E4 A2E3       768            mov     c,_ACC_3
00E6 92A1       769            mov     _P2_1,c
00E8            770   ;        ../LCD.c:24: LCD_D6=ACC_2;
00E8 A2E2       771            mov     c,_ACC_2
00EA 92A2       772            mov     _P2_2,c
00EC            773   ;        ../LCD.c:25: LCD_D5=ACC_1;
00EC A2E1       774            mov     c,_ACC_1
00EE 92A3       775            mov     _P2_3,c
00F0            776   ;        ../LCD.c:26: LCD_D4=ACC_0;
00F0 A2E0       777            mov     c,_ACC_0
00F2 92A4       778            mov     _P2_4,c
00F4            779   ;        ../LCD.c:27: LCD_pulse();
00F4 020000     780            ljmp    _LCD_pulse
00F7            781   ;------------------------------------------------------------
00F7            782   ;Allocation info for local variables in function 'WriteData'
00F7            783   ;------------------------------------------------------------
00F7            784   ;x                         Allocated to registers r2 
00F7            785   ;------------------------------------------------------------
00F7            786   ;        ../LCD.c:30: void WriteData (unsigned char x)
00F7            787   ;        -----------------------------------------
00F7            788   ;         function WriteData
00F7            789   ;        -----------------------------------------
00F7            790   _WriteData:
00F7 AA82       791            mov     r2,dpl
00F9            792   ;        ../LCD.c:32: LCD_RS=1;
00F9 D2A6       793            setb    _P2_6
00FB            794   ;        ../LCD.c:33: LCD_byte(x);
00FB 8A82       795            mov     dpl,r2
00FD 120000     796            lcall   _LCD_byte
0100            797   ;        ../LCD.c:34: waitms(2);
0100 900002     798            mov     dptr,#0x0002
0103 020000     799            ljmp    _waitms
0106            800   ;------------------------------------------------------------
0106            801   ;Allocation info for local variables in function 'WriteCommand'
0106            802   ;------------------------------------------------------------
0106            803   ;x                         Allocated to registers r2 
0106            804   ;------------------------------------------------------------
0106            805   ;        ../LCD.c:37: void WriteCommand (unsigned char x)
0106            806   ;        -----------------------------------------
0106            807   ;         function WriteCommand
0106            808   ;        -----------------------------------------
0106            809   _WriteCommand:
0106 AA82       810            mov     r2,dpl
0108            811   ;        ../LCD.c:39: LCD_RS=0;
0108 C2A6       812            clr     _P2_6
010A            813   ;        ../LCD.c:40: LCD_byte(x);
010A 8A82       814            mov     dpl,r2
010C 120000     815            lcall   _LCD_byte
010F            816   ;        ../LCD.c:41: waitms(5);
010F 900005     817            mov     dptr,#0x0005
0112 020000     818            ljmp    _waitms
0115            819   ;------------------------------------------------------------
0115            820   ;Allocation info for local variables in function 'LCD_4BIT'
0115            821   ;------------------------------------------------------------
0115            822   ;------------------------------------------------------------
0115            823   ;        ../LCD.c:49: void LCD_4BIT (void)
0115            824   ;        -----------------------------------------
0115            825   ;         function LCD_4BIT
0115            826   ;        -----------------------------------------
0115            827   _LCD_4BIT:
0115            828   ;        ../LCD.c:51: LCD_E=0; // Resting state of LCD's enable is zero
0115 C2A5       829            clr     _P2_5
0117            830   ;        ../LCD.c:53: waitms(20);
0117 900014     831            mov     dptr,#0x0014
011A 120000     832            lcall   _waitms
011D            833   ;        ../LCD.c:56: WriteCommand(0x33);
011D 758233     834            mov     dpl,#0x33
0120 120000     835            lcall   _WriteCommand
0123            836   ;        ../LCD.c:57: WriteCommand(0x33);
0123 758233     837            mov     dpl,#0x33
0126 120000     838            lcall   _WriteCommand
0129            839   ;        ../LCD.c:58: WriteCommand(0x32); // Change to 4-bit mode
0129 758232     840            mov     dpl,#0x32
012C 120000     841            lcall   _WriteCommand
012F            842   ;        ../LCD.c:61: WriteCommand(0x28);
012F 758228     843            mov     dpl,#0x28
0132 120000     844            lcall   _WriteCommand
0135            845   ;        ../LCD.c:62: WriteCommand(0x0c);
0135 75820C     846            mov     dpl,#0x0C
0138 120000     847            lcall   _WriteCommand
013B            848   ;        ../LCD.c:63: WriteCommand(0x01); // Clear screen command (takes some time)
013B 758201     849            mov     dpl,#0x01
013E 120000     850            lcall   _WriteCommand
0141            851   ;        ../LCD.c:64: waitms(20); // Wait for clear screen command to finsih.
0141 900014     852            mov     dptr,#0x0014
0144 020000     853            ljmp    _waitms
0147            854   ;------------------------------------------------------------
0147            855   ;Allocation info for local variables in function 'LCDprint'
0147            856   ;------------------------------------------------------------
0147            857   ;line                      Allocated with name '_LCDprint_PARM_2'
0147            858   ;string                    Allocated to registers r2 r3 r4 
0147            859   ;j                         Allocated to registers r5 r6 
0147            860   ;------------------------------------------------------------
0147            861   ;        ../LCD.c:67: void LCDprint(char * string, unsigned char line, bit clear)
0147            862   ;        -----------------------------------------
0147            863   ;         function LCDprint
0147            864   ;        -----------------------------------------
0147            865   _LCDprint:
0147 AA82       866            mov     r2,dpl
0149 AB83       867            mov     r3,dph
014B ACF0       868            mov     r4,b
014D            869   ;        ../LCD.c:70: WriteCommand(line==2?0xc0:0x80); // Choose line 1 or 2
014D 7402       870            mov     a,#0x02
014F B58000     871            cjne    a,_LCDprint_PARM_2,L011013?
0152 7DC0       872            mov     r5,#0xC0
0154 8000       873            sjmp    L011014?
0156            874   L011013?:
0156 7D80       875            mov     r5,#0x80
0158            876   L011014?:
0158 8D82       877            mov     dpl,r5
015A C002       878            push    ar2
015C C003       879            push    ar3
015E C004       880            push    ar4
0160 120000     881            lcall   _WriteCommand
0163            882   ;        ../LCD.c:71: waitms(5);
0163 900005     883            mov     dptr,#0x0005
0166 120000     884            lcall   _waitms
0169 D004       885            pop     ar4
016B D003       886            pop     ar3
016D D002       887            pop     ar2
016F            888   ;        ../LCD.c:72: for(j=0; string[j]!=0; j++)        WriteData(string[j]);// Write the message
016F 7D00       889            mov     r5,#0x00
0171 7E00       890            mov     r6,#0x00
0173            891   L011003?:
0173 ED         892            mov     a,r5
0174 2A         893            add     a,r2
0175 FF         894            mov     r7,a
0176 EE         895            mov     a,r6
0177 3B         896            addc    a,r3
0178 F8         897            mov     r0,a
0179 8C01       898            mov     ar1,r4
017B 8F82       899            mov     dpl,r7
017D 8883       900            mov     dph,r0
017F 89F0       901            mov     b,r1
0181 120000     902            lcall   __gptrget
0184 FF         903            mov     r7,a
0185 6000       904            jz      L011006?
0187 8F82       905            mov     dpl,r7
0189 C002       906            push    ar2
018B C003       907            push    ar3
018D C004       908            push    ar4
018F C005       909            push    ar5
0191 C006       910            push    ar6
0193 120000     911            lcall   _WriteData
0196 D006       912            pop     ar6
0198 D005       913            pop     ar5
019A D004       914            pop     ar4
019C D003       915            pop     ar3
019E D002       916            pop     ar2
01A0 0D         917            inc     r5
01A1 BD0080     918            cjne    r5,#0x00,L011003?
01A4 0E         919            inc     r6
01A5 8000       920            sjmp    L011003?
01A7            921   L011006?:
01A7            922   ;        ../LCD.c:73: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
01A7 303040     923            jnb     _LCDprint_PARM_3,L011011?
01AA 8D02       924            mov     ar2,r5
01AC 8E03       925            mov     ar3,r6
01AE            926   L011007?:
01AE C3         927            clr     c
01AF EA         928            mov     a,r2
01B0 9410       929            subb    a,#0x10
01B2 EB         930            mov     a,r3
01B3 6480       931            xrl     a,#0x80
01B5 9480       932            subb    a,#0x80
01B7 5000       933            jnc     L011011?
01B9 758220     934            mov     dpl,#0x20
01BC C002       935            push    ar2
01BE C003       936            push    ar3
01C0 120000     937            lcall   _WriteData
01C3 D003       938            pop     ar3
01C5 D002       939            pop     ar2
01C7 0A         940            inc     r2
01C8 BA0080     941            cjne    r2,#0x00,L011007?
01CB 0B         942            inc     r3
01CC 8000       943            sjmp    L011007?
01CE            944   L011011?:
01CE 22         945            ret
01CF            946   ;------------------------------------------------------------
01CF            947   ;Allocation info for local variables in function 'main'
01CF            948   ;------------------------------------------------------------
01CF            949   ;period                    Allocated to registers r2 r3 r4 r5 
01CF            950   ;heartRate                 Allocated to registers r2 r3 r4 r5 
01CF            951   ;overflow_count            Allocated to registers r2 
01CF            952   ;buff                      Allocated with name '_main_buff_1_65'
01CF            953   ;------------------------------------------------------------
01CF            954   ;        ../main.c:32: void main (void) 
01CF            955   ;        -----------------------------------------
01CF            956   ;         function main
01CF            957   ;        -----------------------------------------
01CF            958   _main:
01CF            959   ;        ../main.c:41: LCD_4BIT(); // Configure the LCD
01CF 120000     960            lcall   _LCD_4BIT
01D2            961   ;        ../main.c:42: TIMER0_Init(); // Timer 0
01D2 120000     962            lcall   _TIMER0_Init
01D5            963   ;        ../main.c:45: waitms(500); // Give PuTTY a chance to start.
01D5 9001F4     964            mov     dptr,#0x01F4
01D8 120000     965            lcall   _waitms
01DB            966   ;        ../main.c:46: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
01DB 74C0       967            mov     a,#__str_0
01DD C0E0       968            push    acc
01DF 74B6       969            mov     a,#(__str_0 >> 8)
01E1 C0E0       970            push    acc
01E3 7480       971            mov     a,#0x80
01E5 C0E0       972            push    acc
01E7 120000     973            lcall   _printf
01EA 1581       974            dec     sp
01EC 1581       975            dec     sp
01EE 1581       976            dec     sp
01F0            977   ;        ../main.c:49: LCDprint("Heart Monitor:  ", 1, 1);
01F0 758001     978            mov     _LCDprint_PARM_2,#0x01
01F3 D230       979            setb    _LCDprint_PARM_3
01F5 90B780     980            mov     dptr,#__str_1
01F8 75F080     981            mov     b,#0x80
01FB 120000     982            lcall   _LCDprint
01FE            983   ;        ../main.c:52: while (1)
01FE            984   L012018?:
01FE            985   ;        ../main.c:56: TL0=0; 
01FE 758A00     986            mov     _TL0,#0x00
0201            987   ;        ../main.c:57: TH0=0;
0201 758C00     988            mov     _TH0,#0x00
0204            989   ;        ../main.c:58: TF0=0;
0204 C28D       990            clr     _TF0
0206            991   ;        ../main.c:61: while(P0_1!=0); // Wait for the signal to be zero
0206            992   L012001?:
0206 208100     993            jb      _P0_1,L012001?
0209            994   ;        ../main.c:62: while(P0_1!=1); // Wait for the signal to be one
0209            995   L012004?:
0209 308140     996            jnb     _P0_1,L012004?
020C            997   ;        ../main.c:64: TR0=1; // Start the timer
020C D28C       998            setb    _TR0
020E            999   ;        ../main.c:66: while(P0_1!=0) // Wait for the signal to be zero
020E 7A00      1000            mov     r2,#0x00
0210           1001   L012009?:
0210 3081C0    1002            jnb     _P0_1,L012029?
0213           1003   ;        ../main.c:68: if(TF0==1) // Did the 16-bit timer overflow?
0213           1004   ;        ../main.c:70: TF0=0; // Reset the overflow flag
0213 108D00    1005            jbc     _TF0,L012037?
0216 8000      1006            sjmp    L012009?
0218           1007   L012037?:
0218           1008   ;        ../main.c:71: overflow_count++;
0218 0A        1009            inc     r2
0219           1010   ;        ../main.c:75: while(P0_1!=1) // Wait for the signal to be one
0219 8000      1011            sjmp    L012009?
021B           1012   L012029?:
021B           1013   L012014?:
021B 208180    1014            jb      _P0_1,L012016?
021E           1015   ;        ../main.c:77: if(TF0==1) // Did the 16-bit timer overflow?
021E           1016   ;        ../main.c:79: TF0=0;
021E 108DC0    1017            jbc     _TF0,L012039?
0221 8000      1018            sjmp    L012014?
0223           1019   L012039?:
0223           1020   ;        ../main.c:80: overflow_count++;
0223 0A        1021            inc     r2
0224 8000      1022            sjmp    L012014?
0226           1023   L012016?:
0226           1024   ;        ../main.c:84: TR0=0; // Stop the timer
0226 C28C      1025            clr     _TR0
0228           1026   ;        ../main.c:85: period=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK); // ms -- ie. Based on the CKCON0 setup, Timer0 runs on SYSCLK/12 -> 1 Timer0 period has 12/SYSCLK sec (page 316)
0228 8A82      1027            mov     dpl,r2
022A 120000    1028            lcall   ___uchar2fs
022D AA82      1029            mov     r2,dpl
022F AB83      1030            mov     r3,dph
0231 ACF0      1031            mov     r4,b
0233 FD        1032            mov     r5,a
0234 C002      1033            push    ar2
0236 C003      1034            push    ar3
0238 C004      1035            push    ar4
023A C005      1036            push    ar5
023C 900000    1037            mov     dptr,#0x0000
023F 75F080    1038            mov     b,#0x80
0242 7447      1039            mov     a,#0x47
0244 120000    1040            lcall   ___fsmul
0247 AA82      1041            mov     r2,dpl
0249 AB83      1042            mov     r3,dph
024B ACF0      1043            mov     r4,b
024D FD        1044            mov     r5,a
024E E581      1045            mov     a,sp
0250 24FC      1046            add     a,#0xfc
0252 F581      1047            mov     sp,a
0254 858C82    1048            mov     dpl,_TH0
0257 C002      1049            push    ar2
0259 C003      1050            push    ar3
025B C004      1051            push    ar4
025D C005      1052            push    ar5
025F 120000    1053            lcall   ___uchar2fs
0262 AE82      1054            mov     r6,dpl
0264 AF83      1055            mov     r7,dph
0266 A8F0      1056            mov     r0,b
0268 F9        1057            mov     r1,a
0269 C006      1058            push    ar6
026B C007      1059            push    ar7
026D C000      1060            push    ar0
026F C001      1061            push    ar1
0271 900000    1062            mov     dptr,#0x0000
0274 75F080    1063            mov     b,#0x80
0277 7443      1064            mov     a,#0x43
0279 120000    1065            lcall   ___fsmul
027C AE82      1066            mov     r6,dpl
027E AF83      1067            mov     r7,dph
0280 A8F0      1068            mov     r0,b
0282 F9        1069            mov     r1,a
0283 E581      1070            mov     a,sp
0285 24FC      1071            add     a,#0xfc
0287 F581      1072            mov     sp,a
0289 D005      1073            pop     ar5
028B D004      1074            pop     ar4
028D D003      1075            pop     ar3
028F D002      1076            pop     ar2
0291 C006      1077            push    ar6
0293 C007      1078            push    ar7
0295 C000      1079            push    ar0
0297 C001      1080            push    ar1
0299 8A82      1081            mov     dpl,r2
029B 8B83      1082            mov     dph,r3
029D 8CF0      1083            mov     b,r4
029F ED        1084            mov     a,r5
02A0 120000    1085            lcall   ___fsadd
02A3 AA82      1086            mov     r2,dpl
02A5 AB83      1087            mov     r3,dph
02A7 ACF0      1088            mov     r4,b
02A9 FD        1089            mov     r5,a
02AA E581      1090            mov     a,sp
02AC 24FC      1091            add     a,#0xfc
02AE F581      1092            mov     sp,a
02B0 AE8A      1093            mov     r6,_TL0
02B2 7F00      1094            mov     r7,#0x00
02B4 8E82      1095            mov     dpl,r6
02B6 8F83      1096            mov     dph,r7
02B8 C002      1097            push    ar2
02BA C003      1098            push    ar3
02BC C004      1099            push    ar4
02BE C005      1100            push    ar5
02C0 120000    1101            lcall   ___sint2fs
02C3 AE82      1102            mov     r6,dpl
02C5 AF83      1103            mov     r7,dph
02C7 A8F0      1104            mov     r0,b
02C9 F9        1105            mov     r1,a
02CA D005      1106            pop     ar5
02CC D004      1107            pop     ar4
02CE D003      1108            pop     ar3
02D0 D002      1109            pop     ar2
02D2 C006      1110            push    ar6
02D4 C007      1111            push    ar7
02D6 C000      1112            push    ar0
02D8 C001      1113            push    ar1
02DA 8A82      1114            mov     dpl,r2
02DC 8B83      1115            mov     dph,r3
02DE 8CF0      1116            mov     b,r4
02E0 ED        1117            mov     a,r5
02E1 120000    1118            lcall   ___fsadd
02E4 AA82      1119            mov     r2,dpl
02E6 AB83      1120            mov     r3,dph
02E8 ACF0      1121            mov     r4,b
02EA FD        1122            mov     r5,a
02EB E581      1123            mov     a,sp
02ED 24FC      1124            add     a,#0xfc
02EF F581      1125            mov     sp,a
02F1 C002      1126            push    ar2
02F3 C003      1127            push    ar3
02F5 C004      1128            push    ar4
02F7 C005      1129            push    ar5
02F9 90F4FC    1130            mov     dptr,#0xF4FC
02FC 75F032    1131            mov     b,#0x32
02FF 7434      1132            mov     a,#0x34
0301 120000    1133            lcall   ___fsmul
0304 AA82      1134            mov     r2,dpl
0306 AB83      1135            mov     r3,dph
0308 ACF0      1136            mov     r4,b
030A FD        1137            mov     r5,a
030B E581      1138            mov     a,sp
030D 24FC      1139            add     a,#0xfc
030F F581      1140            mov     sp,a
0311           1141   ;        ../main.c:86: heartRate = 60/period; // beats per minute -- Source on how to calculate heart rate: https://www.picotech.com/library/experiment/calculating-heart-rate
0311 C002      1142            push    ar2
0313 C003      1143            push    ar3
0315 C004      1144            push    ar4
0317 C005      1145            push    ar5
0319 900000    1146            mov     dptr,#0x0000
031C 75F070    1147            mov     b,#0x70
031F 7442      1148            mov     a,#0x42
0321 120000    1149            lcall   ___fsdiv
0324 AA82      1150            mov     r2,dpl
0326 AB83      1151            mov     r3,dph
0328 ACF0      1152            mov     r4,b
032A FD        1153            mov     r5,a
032B E581      1154            mov     a,sp
032D 24FC      1155            add     a,#0xfc
032F F581      1156            mov     sp,a
0331           1157   ;        ../main.c:89: printf("%f\n", heartRate);
0331 C002      1158            push    ar2
0333 C003      1159            push    ar3
0335 C004      1160            push    ar4
0337 C005      1161            push    ar5
0339 C002      1162            push    ar2
033B C003      1163            push    ar3
033D C004      1164            push    ar4
033F C005      1165            push    ar5
0341 7440      1166            mov     a,#__str_2
0343 C0E0      1167            push    acc
0345 74BB      1168            mov     a,#(__str_2 >> 8)
0347 C0E0      1169            push    acc
0349 7480      1170            mov     a,#0x80
034B C0E0      1171            push    acc
034D 120000    1172            lcall   _printf
0350 E581      1173            mov     a,sp
0352 24F9      1174            add     a,#0xf9
0354 F581      1175            mov     sp,a
0356           1176   ;        ../main.c:92: sprintf(buff,"%f bpm", heartRate);
0356 7480      1177            mov     a,#__str_3
0358 C0E0      1178            push    acc
035A 74BB      1179            mov     a,#(__str_3 >> 8)
035C C0E0      1180            push    acc
035E 7480      1181            mov     a,#0x80
0360 C0E0      1182            push    acc
0362 7480      1183            mov     a,#_main_buff_1_65
0364 C0E0      1184            push    acc
0366 74B1      1185            mov     a,#(_main_buff_1_65 >> 8)
0368 C0E0      1186            push    acc
036A 7440      1187            mov     a,#0x40
036C C0E0      1188            push    acc
036E 120000    1189            lcall   _sprintf
0371 E581      1190            mov     a,sp
0373 24F6      1191            add     a,#0xf6
0375 F581      1192            mov     sp,a
0377           1193   ;        ../main.c:93: LCDprint(buff, 2, 1);
0377 758002    1194            mov     _LCDprint_PARM_2,#0x02
037A D230      1195            setb    _LCDprint_PARM_3
037C 90B180    1196            mov     dptr,#_main_buff_1_65
037F 75F040    1197            mov     b,#0x40
0382 120000    1198            lcall   _LCDprint
0385 020000    1199            ljmp    L012018?
0388           1200            rseg R_CSEG
0388           1201   
0000           1202            rseg R_XINIT
0000           1203   
0000           1204            rseg R_CONST
0000           1205   __str_0:
0000 1B        1206            db 0x1B
0001 5B324A    1207            db '[2J'
0004 00        1208            db 0x00
0005           1209   __str_1:
0005 48656172  1210            db 'Heart Monitor:  '
     74204D6F
     6E69746F
     723A2020
0015 00        1211            db 0x00
0016           1212   __str_2:
0016 2566      1213            db '%f'
0018 0A        1214            db 0x0A
0019 00        1215            db 0x00
001A           1216   __str_3:
001A 25662062  1217            db '%f bpm'
     706D
0020 00        1218            db 0x00
0021           1219   
0003           1220            CSEG
0003           1221   
0003           1222   end
